name: soc-deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: Choose the action to perform 
        options:
        - Deploy
        - Destroy

      env:
        description: "Environment"
        required: true 
        default: "dev"

env: 
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "us-east-1"
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  TF_VAR_key_name: ${{ secrets.AWS_KEY_NAME }}
  TF_VAR_my_ip: ${{ secrets.MY_IP }}
  TF_VAR_default_thehive_user: ${{ secrets.DEFAULT_THEHIVE_USER }}
  TF_VAR_default_thehive_password: ${{ secrets.DEFAULT_THEHIVE_PASSWORD }}
  TF_VAR_myorg_thehive_user_analyst_password: ${{ secrets.MYORG_THEHIVE_USER_ANALYST_PASSWORD }}
  TF_VAR_myorg_thehive_user_admin_password: ${{ secrets.MYORG_THEHIVE_USER_ADMIN_PASSWORD }}

permissions:
  contents: read # required for actions/checkout

jobs:

  deploy:
    name: Deploy
    if: ${{ github.event.inputs.action == 'Deploy' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        
      - name: Terraform Validate
        id: validate
        run: terraform validate 

      - name: Terraform Plan
        id: plan
        run: terraform plan 
        continue-on-error: false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1


      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        id: apply

      - name: AWS Plan Copy
        if: steps.apply.outcome == 'success'
        run: aws s3 cp terraform.tfstate ${{env.S3_BUCKET}}/${{ github.event.inputs.env }}.tfstate
        id: copy



  destroy:
    name: Destroy
    if: ${{ github.event.inputs.action == 'Destroy' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.event.inputs.resource }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: AWS Plan Copy
        run: aws s3 cp ${{env.S3_BUCKET}}/${{ github.event.inputs.env }}.tfstate terraform.tfstate
        id: copy

      - name: Terraform Init
        id: init
        run: terraform init
      
#      - name: Show Destroy Plan
#        run: terraform plan -destroy
#        continue-on-error: false 

      - name: Destroy resource jobs
        id: destroy
        working-directory: ${{ github.event.inputs.resource }}
        run: terraform destroy -auto-approve 

      - name: Delete plan file
        if: steps.destroy.outcome == 'success'
        run: aws s3 rm ${{env.S3_BUCKET}}/${{ github.event.inputs.env }}.tfstate 


